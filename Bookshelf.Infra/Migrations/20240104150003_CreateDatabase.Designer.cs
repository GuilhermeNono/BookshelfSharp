// <auto-generated />
using System;
using Bookshelf.Infra.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bookshelf.Infra.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240104150003_CreateDatabase")]
    partial class CreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.Author.AuthorE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.Book.BookE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Cape")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CapeType")
                        .HasColumnType("int");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberPages")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PublisherId")
                        .HasColumnType("bigint");

                    b.Property<string>("Sinopse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.BookAuthor.BookAuthorE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<long>("BookId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthor");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.BookCategory.BookCategoryE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BookCategory");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.BookCopy.BookCopyE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<long>("BookId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("LibraryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("LibraryId");

                    b.ToTable("BookCopy");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.Borrowing.BorrowingE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<long>("BookCopyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Overdue")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RenewalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserLibraryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BookCopyId");

                    b.HasIndex("UserLibraryId");

                    b.ToTable("Borrowing");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.Category.CategoryE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.Course.CourseE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LibraryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.Institution.InstitutionE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Institution");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.LibPermission.LibPermissionE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LibPermission");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.Library.LibraryE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<long>("InstitutionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Library");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.LibraryCourse.LibraryCourseE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserLibraryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserLibraryId");

                    b.ToTable("LibraryCourse");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.Password.PasswordE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserAccountId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Password");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.Penality.PenalityE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BorrowingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("PenalityTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BorrowingId");

                    b.HasIndex("PenalityTypeId");

                    b.ToTable("Penality");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.PenalityType.PenalityTypeE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PenalityType");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.Publisher.PublisherE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.SysPermission.SysPermissionE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SysPermission");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.UserAccount.UserAccountE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserAccount");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.UserContact.UserContactE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserContactTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.HasIndex("UserContactTypeId");

                    b.ToTable("UserContact");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.UserContactType.UserContactTypeE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserContactType");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.UserLibrary.UserLibraryE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("LibraryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RmRa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserLibraryProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.HasIndex("UserAccountId");

                    b.HasIndex("UserLibraryProfileId");

                    b.ToTable("UserLibrary");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.UserLibraryCourse.UserLibraryCourseE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserLibraryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserLibraryId");

                    b.ToTable("UserLibraryCourse");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.UserLibraryProfile.UserLibraryProfileE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserLibraryProfile");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.UserLibraryProfileLibPermission.UserLibraryProfileLibPermissionE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("LibPermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserLibraryProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LibPermissionId");

                    b.HasIndex("UserLibraryProfileId");

                    b.ToTable("UserLibraryProfileLibPermission");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.UserProfile.UserProfileE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.UserProfileSysPermission.UserProfileSysPermissionE", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("SysPermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SysPermissionId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserProfileSysPermission");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.Book.BookE", b =>
                {
                    b.HasOne("Bookshelf.Infra.Persistence.Entities.Publisher.PublisherE", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.BookAuthor.BookAuthorE", b =>
                {
                    b.HasOne("Bookshelf.Infra.Persistence.Entities.Author.AuthorE", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookshelf.Infra.Persistence.Entities.Book.BookE", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.BookCategory.BookCategoryE", b =>
                {
                    b.HasOne("Bookshelf.Infra.Persistence.Entities.Book.BookE", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookshelf.Infra.Persistence.Entities.Category.CategoryE", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.BookCopy.BookCopyE", b =>
                {
                    b.HasOne("Bookshelf.Infra.Persistence.Entities.Book.BookE", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookshelf.Infra.Persistence.Entities.Library.LibraryE", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.Borrowing.BorrowingE", b =>
                {
                    b.HasOne("Bookshelf.Infra.Persistence.Entities.BookCopy.BookCopyE", "BookCopy")
                        .WithMany()
                        .HasForeignKey("BookCopyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookshelf.Infra.Persistence.Entities.UserLibrary.UserLibraryE", "UserLibrary")
                        .WithMany()
                        .HasForeignKey("UserLibraryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BookCopy");

                    b.Navigation("UserLibrary");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.Course.CourseE", b =>
                {
                    b.HasOne("Bookshelf.Infra.Persistence.Entities.Library.LibraryE", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.Library.LibraryE", b =>
                {
                    b.HasOne("Bookshelf.Infra.Persistence.Entities.Institution.InstitutionE", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.LibraryCourse.LibraryCourseE", b =>
                {
                    b.HasOne("Bookshelf.Infra.Persistence.Entities.Course.CourseE", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookshelf.Infra.Persistence.Entities.UserLibrary.UserLibraryE", "UserLibrary")
                        .WithMany()
                        .HasForeignKey("UserLibraryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("UserLibrary");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.Password.PasswordE", b =>
                {
                    b.HasOne("Bookshelf.Infra.Persistence.Entities.UserAccount.UserAccountE", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.Penality.PenalityE", b =>
                {
                    b.HasOne("Bookshelf.Infra.Persistence.Entities.Borrowing.BorrowingE", "Borrowing")
                        .WithMany()
                        .HasForeignKey("BorrowingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookshelf.Infra.Persistence.Entities.PenalityType.PenalityTypeE", "PenalityType")
                        .WithMany()
                        .HasForeignKey("PenalityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Borrowing");

                    b.Navigation("PenalityType");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.UserAccount.UserAccountE", b =>
                {
                    b.HasOne("Bookshelf.Infra.Persistence.Entities.UserProfile.UserProfileE", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.UserContact.UserContactE", b =>
                {
                    b.HasOne("Bookshelf.Infra.Persistence.Entities.UserAccount.UserAccountE", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookshelf.Infra.Persistence.Entities.UserContactType.UserContactTypeE", "UserContactType")
                        .WithMany()
                        .HasForeignKey("UserContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");

                    b.Navigation("UserContactType");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.UserLibrary.UserLibraryE", b =>
                {
                    b.HasOne("Bookshelf.Infra.Persistence.Entities.Library.LibraryE", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookshelf.Infra.Persistence.Entities.UserAccount.UserAccountE", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookshelf.Infra.Persistence.Entities.UserLibraryProfile.UserLibraryProfileE", "UserLibraryProfile")
                        .WithMany()
                        .HasForeignKey("UserLibraryProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");

                    b.Navigation("UserAccount");

                    b.Navigation("UserLibraryProfile");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.UserLibraryCourse.UserLibraryCourseE", b =>
                {
                    b.HasOne("Bookshelf.Infra.Persistence.Entities.Course.CourseE", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookshelf.Infra.Persistence.Entities.UserLibrary.UserLibraryE", "UserLibrary")
                        .WithMany()
                        .HasForeignKey("UserLibraryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("UserLibrary");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.UserLibraryProfileLibPermission.UserLibraryProfileLibPermissionE", b =>
                {
                    b.HasOne("Bookshelf.Infra.Persistence.Entities.LibPermission.LibPermissionE", "LibPermission")
                        .WithMany()
                        .HasForeignKey("LibPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookshelf.Infra.Persistence.Entities.UserLibraryProfile.UserLibraryProfileE", "UserLibraryProfile")
                        .WithMany()
                        .HasForeignKey("UserLibraryProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibPermission");

                    b.Navigation("UserLibraryProfile");
                });

            modelBuilder.Entity("Bookshelf.Infra.Persistence.Entities.UserProfileSysPermission.UserProfileSysPermissionE", b =>
                {
                    b.HasOne("Bookshelf.Infra.Persistence.Entities.SysPermission.SysPermissionE", "SysPermission")
                        .WithMany()
                        .HasForeignKey("SysPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookshelf.Infra.Persistence.Entities.UserProfile.UserProfileE", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SysPermission");

                    b.Navigation("UserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
